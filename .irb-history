a.bookmark = b[0..-2].to_json
token = SecureRandom.hex[0,10].upcase
token = SecureRandom.hex[0,15]
token = SecureRandom.hex[0,10]
SecureRandom.hex(0,10)
SecureRandom.hex(10)
SecureRandom.hex(5)
SecureRandom.hex[0,10]
last.user
last.user.name
last.share_token
User.last.records.first
Record.all
Record.find(1)
User.last
User.last.records
User.last.records.last.name
clear
User.last.records.last
User.destroy_al
User.destroy_all
Record.destroy_all
a = 
a = Record.find(3)
asset_path("wave_white.png")
asset_url("wave_white.png")
last = Record.last
last.username == "최수빈"
Record.last.share_token.blank?
Record.find_by share_token 0d68026db1
Record.find_by share_token: 0d68026db1
nil.blank?
a = Record.find_by share_token: 26f0c3780b
a = Record.find_by share_token: "26f0c3780b"
a == nill
a == nil
a != nil
Record.last.bookmarkhistories
Bookmark_Histories.find_by record_id 9
Bookmark_Histories.all
Bookmarks.all
Bookmark_History.all
Boomkark_history.a
Boomkark_history.all
Record.last.bookmark
Record.find(7).bookmark
Record.find(8)
Record.find(8).bookmark
Record.find(8).bookmark_histories
Bookmark.find_by_name("Not Important")
*BookmarkHistory.column_names
a = *BookmarkHistory.column_names
a
b = a.except('id')
b
history = Record.find(8).bookmark_histories
history
history.slice(a)
a = Record.find(10)
a.bookmark
a.bookmark_histories
reload
Record.find(10)
Record.find(10).bookmark
Record.last.uuid
Record.last.noise_reduced_file_url
a = Record.last
a.noies_reduced_file_url = nil
a.noies_reduced_file_url = ""
a.noise_reduced_file_url = ""
a.noise_reduced_file_url = nil
a.save
url = URI.parse("http://nr.devsusu.info/")
req = Net::HTTP::Get.new(url.to_s)
req
res = Net::HTTP.start(url.host, url.port) { |http| http.request(req) }
res.body
url = URI.parse("http://localhost:4567/nr")
url.to_s
params = { :url => "https://asdf.aws.com" , :uuid => "uuuuuu" }
uri.query = URI.encode_www_form(params)
url.query = URI.encode_www_form(params)
res = Net:HTTP.get(url)
res = Net::HTTP.get(url)
reload!
Record.last
Record.last.file.url
Dotenv.load
connection = Fog::Storage.new({
    :provider               => 'AWS',
    :aws_access_key_id      => ENV['AWS_ACCESS_KEY_ID'],
    :aws_secret_access_key  => ENV['AWS_SECRET_ACCESS_KEY'],
  })
ENV['AWS_ACCESS_KEY_ID']
ENV = Dotenv.load
ENV
connection = Fog::Storage.new({:provider               => 'AWS',:aws_access_key_id      => ENV['AWS_ACCESS_KEY_ID'],:aws_secret_access_key  => ENV['AWS_SECRET_ACCESS_KEY'],})
connection = Fog::Storage.new({:provider => 'AWS',:aws_access_key_id => ENV['AWS_ACCESS_KEY_ID'],:aws_secret_access_key  => ENV['AWS_SECRET_ACCESS_KEY'],})
require 'fog'
connection = Fog::Storage.new({:provider => 'AWS',:aws_access_key_id => ENV['AWS_ACCESS_KEY_ID'],:aws_secret_access_key  => ENV['AWS_SECRET_ACCESS_KEY']})
